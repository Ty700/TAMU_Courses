In this module, we will learn about verilog operators 

Bit-wise operators 
    - Bit-wise operatirs operate on vectors 
    - Operations are performed bit by bit on individual bits 
    - Unknown bits in an operand do not necessarily lead to unknown bits in the result 

    not     ~ 
    and     & 
    or      | 
    xor     ^ 
    xnor    ~^
    xnor    ^~

Unary Reduction Operators 
    - reduction operators perform a bit-wise operation on all the bits of a single operand 
    - results will always be 1'b0, 1'b1, or 1'bX 

and     & 
or      | 
xor     ^ 
nand    ~& 
nor     ~| 
xnor    ~^ and ^~

Logical Operators 
    not ! 
    and && 
    or || 

    Logical operators interpret their operands as either true or false or unknown 
    0 - if all bits 0 
    1 - if any bits 1 
    X - if any bits are Z or X and not bit is 1 

Arithmetic Operators 
    Verilog-1995 
        Add         + 
        Subtract    - 
        Multiply    * 
        Divide      /
        Modulus     % 
        Unsigned    Based literal, net, reg, time 
        Signed      Unbased literal, integer 

Enhanced Signed Arithmetic
    Verilog-2001 
        - New reserved word: signed 
            - signed keyword treats literal, function, net, reg as signed 
        
        32'shFDB97531 
            - 32 bit signed hex 

        function signed [31:0] alu;
        wire signed [15:0] addr;
        reg signed [31:0] data;

        - Arithmetic right shift operators maintain the sign of a value 
        - $signed and $unsigned system functions cast value 

Signed Vectors 
    - signed defines vector types as signed quantities 
        - 2's complement
            - also for function returns 
            - signed arithmetic for vectors is easier 
            - assignments between signed reg and integer types maintain sign information 
            - vector types can also be defined as unsigned 
        - By default vectors are unsigned 

        reg[3:0] usreg;
            // 4 bit vector in range 0 to 15 

        reg signed [3:0] reg;
            // 4 bit vector in range -8 to 7 

Shift Operators 
    - Verilog-1995 
        - Logical shift << >>
            - ignores operand signs 
            - fills extra bits with 0 
            - implements division or multiplication of power of 2 
        
    - Verilog-2001 
        - Arithmetic shift <<< >>> 
            - ignores right operand sign 
            - left shift operates like logical left shift 
            - right shift preserves the left operand sign if the result is a signed expression

        rega = 8'b10011001;
        signed regs = 8'b10011001;

        regb;

        regb = rega << 1;   // 00110010
        regb = rega >> 1;   // 01001100
        regb = regs <<< 1;  // 00110010
        regb = regs >>> 1;  // 11001100
        regb = rega << -1;  // 00000000 
            - why? because -1 = 2^32 - 1
                so we are shifting left a LOT since 2^32 - 1 >>>>> 8, then the result will be cleared 

Relational Operators 
    less than < 
    greater than > 
    less than or equal to <=
    greater than or equal to >=

        - 1'b0 if the relation is false 
        - 1'b1 if the relation is true 
        - 1'bX if either operand contains "Z" or "X" bits 
    
Logical Equality and Case Equality Operators 
    Logical Equality
        == 
            - results can be unknown 
            - 1 == 1 - true 
            - 1 == X - Unknown 
            - 1 == 0 - false 
            - z == z - unknown 
            - x == x - unknown
    Case Equality
        ===
            - Result is always unkown 
            - 1 === 1 - true 
            - 1 === X - false   
            - 1 === 0 - false
            - Z === Z - true 
            - x === x - true 

Conditional Operator (?)
    - Just like C and C++ 

Concatenation Operator 
    - can select and join bits from different vectors to form a new vector 
        - forms unsigned expression 
    - Can reorganize vector bits to form a new vector 
        - Endian swaps / reverse / rotate 
    - Can use on either side of an assignment

    Example:
        rega = 8'b0000_0011;
        regb = 8'b0000_0100;
        regc = 8'b0001_1000;
        regd = 8'b1110_0000;

        reg new;

        new = {regd[6:5], regc[4:3], regb[3:0]};
            // new = [1111_0100]

        new = {2'b11, regb[7:5], rega[4:3], 1'b1};
            // new = [1100_0001]

        new = {regd[4:0], regd[7:5]}
            // new = [0000_0111]

        {nib1, nib2} = rega;
            // nib1 = 4'b0000, nib2 = 4'b0011 

Replication Operator 
    - Reproduces a concatenation a set number of times 
    - Syntax 
        {const_expr{sized_expr}}
            - const_expr can't have z or x 

    Example:
        rega = 1'b1;
        regb = 2'b11;
        regc = 4'b1001;

        bus = {8{rega}}
            // bus = 1111_1111

        bus = {{4{rega}}, {2{regc[1:0]}}};
            // bus = [1111_0101]
        
        bus = {regc, {2{regb}}}
            // bus = [1001_1111]

        bus = {2{regc[2:1], {2{1'b1}}}};
            // bus = [0011_0011]

Review 
    1. How wide is the result of a logical operation?
        1 bit 
    
    2. Explain the difference between the && and & operator 
        & - bitwise 
            - goes through each of the bits and ands them together 
        && - logical 
            - if both inputs are not 0, then result is 1, else result is 0 

    3. T/F - You must explicitly size literals in a concatenation
        - T 
    
    4. Given the statement regx = 4'b0101 what is the value of:
        bus = {2{regx[3:1], {3{1'b0, regx[0]}}}}

            2{010, 3{01}}
            2{010010101}
            010010101010010101

Module Exercise 
    Fix this code so that it preserves the sign of the value 

    integer i;
    always @(...)
        begin 
            ...
            i = -4;
            ...
            i = i >> 1;
            ...
        end 

    
        integer i;
    always @(...)
        begin 
            ...
            i = -4;
            ...
            i = i >>> 1; // Changed >> to >>>
            ...
        end 
